import Head from "next/head";
import { useContext, useRef, useState } from "react";

import LoginForm from "@/components/pages/login/Loginform";

import { SINGLE_INPUT } from "@/constants/inputTypes";
import { NEXT_EMAIL, REGISTER, VERIFY_OTP } from "@/constants/endPoints";
import { useRouter } from "next/router";
import { ToastContext } from "@/context/Toast/ToastContext";
import { getSession } from "next-auth/react";

export default function Home() {
  const { showToast } = useContext(ToastContext);
  const [loading, setLoading] = useState(false);

  // input ref is a array of refs for each input otp
  const inputRef = useRef();
  const router = useRouter();
  const { callbackUrl } = router.query;

  const onSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    // get the email from the inputRef and send it to the server
    const email = inputRef.current.value.trim().toLowerCase();
    inputRef.current.value = email;
    // console.log(email);

    // email should be valid using regex
    if (email.match(/\S+@iitrpr\.ac\.in$/) === null) {
      showToast({ type: "error", message: "Email is not from iitrpr domain" });
      setLoading(false);
      return;
    }

    // TODO: send email to server
    const res = await fetch(NEXT_EMAIL, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ email }),
    });
    const data = await res.json();
    // console.log(data);

    if (res.status !== 200) {
      showToast({ type: "error", message: data.error });
    } else {
      showToast({ type: "success", message: data.message });
      setLoading(false);
      // redirect to otp page with email
      router.push({
        pathname: VERIFY_OTP,
        query: { email, callbackUrl },
      });
    }
    setLoading(false);
  };

  const props = {
    Heading: "Login",
    SubHeading: "Enter your email to login",
    ButtonText: loading ? "Sending..." : "Next",
    SecondButtonText: "Don't have an account?",
    SecondButtonText2: "Register",
    SecondButtonLink: REGISTER,

    isLoader: loading,
    inputRef: inputRef,
    inputType: SINGLE_INPUT,
    ButtonAction: onSubmit,
  };
  return (
    <>
      <Head>
        <title>Login</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>
      <LoginForm {...props} />
    </>
  );
}

export async function getServerSideProps(context) {
  // get the session and print
  const session = await getSession(context);

  // if session is not null then redirect to home page
  // if (session?.user?.user) {
  //   return {
  //     redirect: {
  //       destination: "/",
  //       permanent: false,
  //     },
  //   };
  // }

  return {
    props: {
      session,
    },
  };
}
