import Head from "next/head";
import { useContext, useRef, useState } from "react";

import { REGISTER } from "@/constants/endPoints";
import { useRouter } from "next/router";
import { ToastContext } from "@/context/Toast/ToastContext";
import LoginStep from "@/components/Steps/LoginStep";
import Common from "@/components/pages/login/Register/Common";
import { FACULTY, STAFF, STUDENT } from "@/constants/roles";
import StudentDetails from "@/components/pages/login/Register/Student";
import FacultyDetails from "@/components/pages/login/Register/Faculty";
import StaffDetails from "@/components/pages/login/Register/Staff";
import { getSession } from "next-auth/react";

export default function Home() {
  const { showToast } = useContext(ToastContext);
  const [loading, setLoading] = useState(false);
  const [allUserDetails, setAllUserDetails] = useState({});

  // input ref is a array of refs for each input otp
  const formRef = useRef(null);
  const router = useRouter();

  const steps = [
    {
      name: "User info",
      description: "Details common to all users",
    },
    {
      name: allUserDetails.role ?? "Role",
      description: "Details specific to your role",
    },
  ];
  const [activeStep, setActiveStep] = useState(0);
  const handleStepClick = (index) => {
    console.log("clicked");
    setActiveStep(index);
  };

  const commonInfo = async (e) => {
    e.preventDefault();
    setLoading(true);
    // formRef prints the form data
    console.log(formRef.current);
    const formData = new FormData(formRef.current);
    const data = Object.fromEntries(formData);
    console.log(formData);
    console.log(data);

    // check if email is from iitrpr domain
    const email = data.email;
    if (email.match(/\S+@iitrpr\.ac\.in$/) === null) {
      showToast({ type: "error", message: "Email is not from iitrpr domain" });
      setLoading(false);
      return;
    }

    // check if all fields are filled
    if (Object.values(data).includes("")) {
      showToast({ type: "error", message: "Please fill all the fields" });
      setLoading(false);
      return;
    }
    // add to allUserDetails

    setAllUserDetails({ ...allUserDetails, ...data });
    console.log(allUserDetails);
    // increment activeStep
    setActiveStep(activeStep + 1);
    setLoading(false);
  };

  const roleInfo = async (e) => {
    e.preventDefault();
    setLoading(true);
    // formRef prints the form data
    console.log(formRef.current);

    const formData = new FormData(formRef.current);
    const data = Object.fromEntries(formData);
    console.log(formData);
    console.log(data);

    // check if all fields are filled
    if (Object.values(data).includes("")) {
      showToast({ type: "error", message: "Please fill all the fields" });
      setLoading(false);
      return;
    }
    // add to allUserDetails
    setAllUserDetails({ ...allUserDetails, ...data });
    console.log(allUserDetails);
    const dataToPost = {
      ...allUserDetails,
      ...data,
    };
    // send data to backend
    const res = await fetch("/api/login/register", {
      method: "POST",
      body: JSON.stringify(dataToPost),
      headers: {
        "Content-Type": "application/json",
      },
    });
    const json = await res.json();
    console.log(json);
    if (res.ok) {
      showToast({ type: "success", message: "Registered successfully" });
      router.push("/login/getOtp");
    } else {
      showToast({ type: "error", message: json.errors });
    }
    setLoading(false);
  };

  const props1 = {
    Heading: "Login",
    SubHeading: "Enter your email to login",
    ButtonText: loading ? "Sending..." : "Next",
    SecondButtonText: "Already have an account?",
    SecondButtonText2: "Login",
    SecondButtonLink: "/login/getOtp",

    isLoader: loading,
    formRef: formRef,
    // inputRef: inputRef,
    // inputType: SINGLE_INPUT,
    ButtonAction: commonInfo,
  };

  const props2 = {
    Heading: "Login",
    SubHeading: "Enter your email to login",
    ButtonText: loading ? "Sending..." : "Register",
    SecondButtonText: "Already have an account?",
    SecondButtonText2: "Login",
    SecondButtonLink: "/login/getOtp",

    isLoader: loading,
    formRef: formRef,
    // inputRef: inputRef,
    // inputType: SINGLE_INPUT,
    ButtonAction: roleInfo,
  };
  return (
    <>
      <Head>
        <title>Login</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>
      <section className="bg-gray-50 dark:bg-gray-900">
        <div className="flex flex-col items-center justify-center px-6 py-8 mx-auto md:h-screen lg:py-0">
          <div className="w-full bg-white rounded-lg shadow dark:border md:mt-0 sm:max-w-2xl xl:p-0 dark:bg-gray-800 dark:border-gray-700">
            <div className="p-6 space-y-4 md:space-y-6 sm:p-8">
              <LoginStep
                steps={steps}
                activeStep={activeStep}
                handleStepClick={handleStepClick}
              />
              {/* <h1 className="text-xl font-bold leading-tight tracking-tight text-gray-900 md:text-2xl dark:text-white">
                Create and account
              </h1> */}
              {activeStep === 0 && <Common {...props1} />}
              {activeStep === 1 && allUserDetails.role === STUDENT && (
                <StudentDetails {...props2} />
              )}
              {activeStep === 1 && allUserDetails.role === FACULTY && (
                <FacultyDetails {...props2} />
              )}
              {activeStep === 1 && allUserDetails.role === STAFF && (
                <StaffDetails {...props2} />
              )}
              {activeStep === 1 &&
                allUserDetails.role !== STUDENT &&
                allUserDetails.role !== FACULTY &&
                allUserDetails.role !== STAFF && (
                  // ask to please fill the previous form
                  <div className="flex flex-col items-center justify-center">
                    <h1 className="text-xl font-bold leading-tight tracking-tight text-gray-900 md:text-2xl dark:text-white">
                      Please fill the previous form
                    </h1>
                    <button
                      onClick={() => setActiveStep(activeStep - 1)}
                      className="px-4 py-2 mt-4 text-sm font-medium text-white bg-blue-500 rounded-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                    >
                      Go back
                    </button>
                  </div>
                )}
            </div>
          </div>
        </div>
      </section>
    </>
  );
}

export async function getServerSideProps(context) {
  // get the session and print
  const session = await getSession(context);

  // if session is not null then redirect to home page
  if (session?.user?.user) {
    return {
      redirect: {
        destination: "/",
        permanent: false,
      },
    };
  }

  return {
    props: {
      session,
    },
  };
}
